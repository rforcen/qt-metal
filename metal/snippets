void MainWindow::example00() {
  device = mtlpp::Device::CreateSystemDefaultDevice();
  if (device) {
    ui->statusbar->showMessage(
        QString("metal device:%1").arg(device.GetName().GetCStr()));
  }
}
void MainWindow::example01() {
  device = mtlpp::Device::CreateSystemDefaultDevice();
  if (device) {
    const uint32_t width = 4;
    const uint32_t height = 4;

    mtlpp::TextureDescriptor textureDesc =
        mtlpp::TextureDescriptor::Texture2DDescriptor(
            mtlpp::PixelFormat::RGBA8Unorm, width, height, false);
    textureDesc.SetUsage(mtlpp::TextureUsage::RenderTarget);
    mtlpp::Texture texture = device.NewTexture(textureDesc);
    assert(texture);

    mtlpp::CommandQueue commandQueue = device.NewCommandQueue();
    assert(commandQueue);
    mtlpp::CommandBuffer commandBuffer = commandQueue.CommandBuffer();
    assert(commandBuffer);

    mtlpp::RenderPassDescriptor renderPassDesc;
    mtlpp::RenderPassColorAttachmentDescriptor colorAttachmentDesc =
        renderPassDesc.GetColorAttachments()[0];
    colorAttachmentDesc.SetTexture(texture);
    colorAttachmentDesc.SetLoadAction(mtlpp::LoadAction::Clear);
    colorAttachmentDesc.SetStoreAction(mtlpp::StoreAction::Store);
    colorAttachmentDesc.SetClearColor(mtlpp::ClearColor(1.0, 0.0, 0.0, 0.0));
    renderPassDesc.SetRenderTargetArrayLength(1);

    mtlpp::RenderCommandEncoder renderCommandEncoder =
        commandBuffer.RenderCommandEncoder(renderPassDesc);
    assert(renderCommandEncoder);
    renderCommandEncoder.EndEncoding();

    mtlpp::BlitCommandEncoder blitCommandEncoder =
        commandBuffer.BlitCommandEncoder();
    blitCommandEncoder.Synchronize(texture, 0, 0);
    blitCommandEncoder.EndEncoding();

    commandBuffer.Commit();
    commandBuffer.WaitUntilCompleted();

    uint32_t data[width * height];
    texture.GetBytes(data, width * 4, mtlpp::Region(0, 0, width, height), 0);

    for (uint32_t i = 0; i < width * height; i++) {
      assert(data[i] == 0x000000FF);
    }
  }
}
void MainWindow::example02() {  // triangle
  const uint32_t width = 16;
  const uint32_t height = 16;

  mtlpp::Device device = mtlpp::Device::CreateSystemDefaultDevice();
  assert(device);

  mtlpp::TextureDescriptor textureDesc =
      mtlpp::TextureDescriptor::Texture2DDescriptor(mtlpp::PixelFormat::R8Unorm,
                                                    width, height, false);
  textureDesc.SetUsage(mtlpp::TextureUsage::RenderTarget);
  mtlpp::Texture texture = device.NewTexture(textureDesc);
  assert(texture);

  const char shadersSrc[] = R"""(
           #include <metal_stdlib>
           using namespace metal;

           vertex float4 vertFunc (
               const device packed_float3* vertexArray [[buffer(0)]],
               unsigned int vID[[vertex_id]])
           {
               return float4(vertexArray[vID], 1.0);
           }

           fragment half4 fragFunc ()
           {
               return half4(1.0);
           }
       )""";

  mtlpp::Library library =
      device.NewLibrary(shadersSrc, mtlpp::CompileOptions(), nullptr);
  assert(library);
  mtlpp::Function vertFunc = library.NewFunction("vertFunc");
  assert(vertFunc);
  mtlpp::Function fragFunc = library.NewFunction("fragFunc");
  assert(fragFunc);

  mtlpp::RenderPipelineDescriptor renderPipelineDesc;
  renderPipelineDesc.SetVertexFunction(vertFunc);
  renderPipelineDesc.SetFragmentFunction(fragFunc);
  renderPipelineDesc.GetColorAttachments()[0].SetPixelFormat(
      mtlpp::PixelFormat::R8Unorm);
  mtlpp::RenderPipelineState renderPipelineState =
      device.NewRenderPipelineState(renderPipelineDesc, nullptr);
  assert(renderPipelineState);

  const float vertexData[] = {
      0.0f, 1.0f, 0.0f, -1.0f, -1.0f, 0.0f, 1.0f, -1.0f, 0.0f,
  };
  mtlpp::Buffer vertexBuffer =
      device.NewBuffer(vertexData, sizeof(vertexData),
                       mtlpp::ResourceOptions::CpuCacheModeDefaultCache);
  assert(vertexBuffer);

  mtlpp::CommandQueue commandQueue = device.NewCommandQueue();
  assert(commandQueue);
  mtlpp::CommandBuffer commandBuffer = commandQueue.CommandBuffer();
  assert(commandBuffer);

  mtlpp::RenderPassDescriptor renderPassDesc;
  mtlpp::RenderPassColorAttachmentDescriptor colorAttachmentDesc =
      renderPassDesc.GetColorAttachments()[0];
  colorAttachmentDesc.SetTexture(texture);
  colorAttachmentDesc.SetLoadAction(mtlpp::LoadAction::Clear);
  colorAttachmentDesc.SetStoreAction(mtlpp::StoreAction::Store);
  colorAttachmentDesc.SetClearColor(mtlpp::ClearColor(0.0, 0.0, 0.0, 0.0));
  renderPassDesc.SetRenderTargetArrayLength(1);

  mtlpp::RenderCommandEncoder renderCommandEncoder =
      commandBuffer.RenderCommandEncoder(renderPassDesc);
  assert(renderCommandEncoder);
  renderCommandEncoder.SetRenderPipelineState(renderPipelineState);
  renderCommandEncoder.SetVertexBuffer(vertexBuffer, 0, 0);
  renderCommandEncoder.Draw(mtlpp::PrimitiveType::Triangle, 0, 3);
  renderCommandEncoder.EndEncoding();

  mtlpp::BlitCommandEncoder blitCommandEncoder =
      commandBuffer.BlitCommandEncoder();
  blitCommandEncoder.Synchronize(texture, 0, 0);
  blitCommandEncoder.EndEncoding();

  commandBuffer.Commit();
  commandBuffer.WaitUntilCompleted();

  uint8_t data[width * height];
  texture.GetBytes(data, width, mtlpp::Region(0, 0, width, height), 0);

  QString s;
  for (uint32_t y = 0; y < height; y++) {
    for (uint32_t x = 0; x < width; x++) {
      s += QString().sprintf("%02X ", data[x + y * width]);
    }
    s += QString().sprintf("\n");
  }
  ui->textBrowser->append(s);
}
void MainWindow::example03() {  // sqr
  mtlpp::Device device = mtlpp::Device::CreateSystemDefaultDevice();
  assert(device);

  const char shadersSrc[] = R"""(
            #include <metal_stdlib>
            using namespace metal;

            kernel void sqr(
                const device float *vIn [[ buffer(0) ]],
                device float *vOut [[ buffer(1) ]],
                uint id[[ thread_position_in_grid ]])
            {
                vOut[id] = vIn[id] * vIn[id];
            }
        )""";

  mtlpp::Library library =
      device.NewLibrary(shadersSrc, mtlpp::CompileOptions(), nullptr);
  assert(library);
  mtlpp::Function sqrFunc = library.NewFunction("sqr");
  assert(sqrFunc);

  mtlpp::ComputePipelineState computePipelineState =
      device.NewComputePipelineState(sqrFunc, nullptr);
  assert(computePipelineState);

  mtlpp::CommandQueue commandQueue = device.NewCommandQueue();
  assert(commandQueue);

  const uint32_t dataCount = 160;

  mtlpp::Buffer inBuffer = device.NewBuffer(
      sizeof(float) * dataCount, mtlpp::ResourceOptions::StorageModeManaged);
  assert(inBuffer);

  mtlpp::Buffer outBuffer = device.NewBuffer(
      sizeof(float) * dataCount, mtlpp::ResourceOptions::StorageModeManaged);
  assert(outBuffer);

  for (uint32_t i = 0; i < 16; i++) {
    // update input data
    {
      float* inData = static_cast<float*>(inBuffer.GetContents());
      for (uint32_t j = 0; j < dataCount; j++) inData[j] = 10 * i + j;
      inBuffer.DidModify(ns::Range(0, sizeof(float) * dataCount));
    }

    mtlpp::CommandBuffer commandBuffer = commandQueue.CommandBuffer();
    assert(commandBuffer);

    mtlpp::ComputeCommandEncoder commandEncoder =
        commandBuffer.ComputeCommandEncoder();
    commandEncoder.SetBuffer(inBuffer, 0, 0);
    commandEncoder.SetBuffer(outBuffer, 0, 1);
    commandEncoder.SetComputePipelineState(computePipelineState);
    commandEncoder.DispatchThreadgroups(mtlpp::Size(1, 1, 1),
                                        mtlpp::Size(dataCount, 1, 1));
    commandEncoder.EndEncoding();

    mtlpp::BlitCommandEncoder blitCommandEncoder =
        commandBuffer.BlitCommandEncoder();
    blitCommandEncoder.Synchronize(outBuffer);
    blitCommandEncoder.EndEncoding();

    commandBuffer.Commit();
    commandBuffer.WaitUntilCompleted();

    // read the data
    QString s;
    {
      float* inData = static_cast<float*>(inBuffer.GetContents());
      float* outData = static_cast<float*>(outBuffer.GetContents());
      for (uint32_t j = 0; j < dataCount; j++)
        s.append(QString().sprintf("sqr(%g) = %g\n", inData[j], outData[j]));
    }
    ui->textBrowser->append(s);
  }
}
void MainWindow::example04() {
  int w = 640, h = 640;
  const uint32_t width = w;
  const uint32_t height = h;

  mtlpp::Device device = mtlpp::Device::CreateSystemDefaultDevice();
  assert(device);

  mtlpp::TextureDescriptor textureDesc =
      mtlpp::TextureDescriptor::Texture2DDescriptor(mtlpp::PixelFormat::R8Unorm,
                                                    width, height, false);
  textureDesc.SetUsage(mtlpp::TextureUsage::RenderTarget);
  mtlpp::Texture texture = device.NewTexture(textureDesc);
  assert(texture);

  static const char shadersSrc[] = R"""(
             #include <metal_stdlib>
             using namespace metal;

             vertex float4 vertFunc (
                 const device packed_float3* vertexArray [[buffer(0)]],
                 unsigned int vID[[vertex_id]])
             {
                 return float4(vertexArray[vID], 1.0);
             }

             fragment half4 fragFunc ()
             {
                 return half4(1.0);
             }
         )""";

  mtlpp::Library library =
      device.NewLibrary(shadersSrc, mtlpp::CompileOptions(), nullptr);
  assert(library);
  mtlpp::Function vertFunc = library.NewFunction("vertFunc");
  assert(vertFunc);
  mtlpp::Function fragFunc = library.NewFunction("fragFunc");
  assert(fragFunc);

  mtlpp::RenderPipelineDescriptor renderPipelineDesc;
  renderPipelineDesc.SetVertexFunction(vertFunc);
  renderPipelineDesc.SetFragmentFunction(fragFunc);
  renderPipelineDesc.GetColorAttachments()[0].SetPixelFormat(
      mtlpp::PixelFormat::R8Unorm);
  mtlpp::RenderPipelineState renderPipelineState =
      device.NewRenderPipelineState(renderPipelineDesc, nullptr);
  assert(renderPipelineState);

  const float vertexData[] = {
      0.0f, 1.0f, 0.0f, -1.0f, -1.0f, 0.0f, 1.0f, -1.0f, 0.0f,
  };
  mtlpp::Buffer vertexBuffer =
      device.NewBuffer(vertexData, sizeof(vertexData),
                       mtlpp::ResourceOptions::CpuCacheModeDefaultCache);
  assert(vertexBuffer);

  mtlpp::CommandQueue commandQueue = device.NewCommandQueue();
  assert(commandQueue);
  mtlpp::CommandBuffer commandBuffer = commandQueue.CommandBuffer();
  assert(commandBuffer);

  mtlpp::RenderPassDescriptor renderPassDesc;
  mtlpp::RenderPassColorAttachmentDescriptor colorAttachmentDesc =
      renderPassDesc.GetColorAttachments()[0];
  colorAttachmentDesc.SetTexture(texture);
  colorAttachmentDesc.SetLoadAction(mtlpp::LoadAction::Clear);
  colorAttachmentDesc.SetStoreAction(mtlpp::StoreAction::Store);
  colorAttachmentDesc.SetClearColor(mtlpp::ClearColor(0.0, 0.0, 0.0, 0.0));
  renderPassDesc.SetRenderTargetArrayLength(1);

  mtlpp::RenderCommandEncoder renderCommandEncoder =
      commandBuffer.RenderCommandEncoder(renderPassDesc);
  assert(renderCommandEncoder);
  renderCommandEncoder.SetRenderPipelineState(renderPipelineState);
  renderCommandEncoder.SetVertexBuffer(vertexBuffer, 0, 0);
  renderCommandEncoder.Draw(mtlpp::PrimitiveType::Triangle, 0, 3);
  renderCommandEncoder.EndEncoding();

  mtlpp::BlitCommandEncoder blitCommandEncoder =
      commandBuffer.BlitCommandEncoder();
  blitCommandEncoder.Synchronize(texture, 0, 0);
  blitCommandEncoder.EndEncoding();

  commandBuffer.Commit();
  commandBuffer.WaitUntilCompleted();

  uint8_t data[width * height];
  texture.GetBytes(data, width, mtlpp::Region(0, 0, width, height), 0);

  if (scene) delete scene;
  scene = new QGraphicsScene;
  scene->addItem(new QGraphicsPixmapItem(QPixmap::fromImage(
      QImage(data, width, height, QImage::Format_Indexed8))));

  ui->graphicsView->setScene(scene);
}

void MainWindow::_voronoi() {
  static const char* voronoi_metal = R"(
//
//  Voronoi.metal
//  Voronoi
//

#include <metal_stdlib>
using namespace metal;

typedef uint32_t color; // aa bb gg rr  32 bit color
typedef uint8_t byte;
typedef uint2 point;

inline int sqMag(device point& pnt, int x, int y) {
    int xd = x - pnt.x;
    int yd = y - pnt.y;
    return (xd * xd) + (yd * yd);
}

color genPixel(uint i, uint j, uint count, device point* points, device color*colors) {
    int ind = -1, dist = INT_MAX;

    for (uint it = 0; it < count; it++) {
        int d = sqMag(points[it], i, j);
        if (d < dist) {
            dist = d;
            ind = (int)it;
        }
    }

    return (ind > -1) ? colors[ind] : 0xff000000;
}

kernel void Voronoi(device color*pixels[[buffer(0)]],
                    device point*points[[buffer(1)]],
                    device color*colors[[buffer(2)]],

                    const device uint &count[[buffer(3)]],  // count

                    uint2 position [[thread_position_in_grid]],
                    uint2 tpg[[threads_per_grid]])
{
    uint x=position.x, y=position.y, width=tpg.x;
    pixels[x + y * width] = genPixel(x, y, count, points, colors);
}

// set inner black pixel
kernel void setPointBox(device color*pixels[[buffer(0)]],
                      device point*points[[buffer(1)]],
                      const device uint &width[[buffer(2)]],   // width

                      uint2 position [[thread_position_in_grid]]
                      )
{
   int i=position.x;
   int x = points[i].x, y = points[i].y;
   const color black=0xff000000;

    for (int i = 0; i < 2; i++)
      for (int j = 0; j < 2; j++)
          pixels[(x + i) + width * (y + j)] = black;
}
)";

  mtlpp::Device device = mtlpp::Device::CreateSystemDefaultDevice();
  assert(device);

  int w = 1024, h = 768;

  int count = 2500;

  point* points = new point[count];
  color* colors = new color[count];
  color* pic = new color[w * h];

  for (int i = 0; i < count; i++) {
    points[i] = {(rand() % (w - 10)) + 5, (rand() % (h - 10)) + 5};
    colors[i] =
        makeColor(rand() % 200 + 50, rand() % 200 + 55, rand() % 200 + 50);
  }

  // compile
  mtlpp::Library library =
      device.NewLibrary(voronoi_metal, mtlpp::CompileOptions(), nullptr);
  assert(library);
  mtlpp::Function kFunc = library.NewFunction("Voronoi");

  // pipe line
  mtlpp::ComputePipelineState pipeline =
      device.NewComputePipelineState(kFunc, nullptr);
  assert(pipeline);
  mtlpp::CommandQueue commandQueue = device.NewCommandQueue();
  assert(commandQueue);
  mtlpp::CommandBuffer commandBuffer = commandQueue.CommandBuffer();
  assert(commandBuffer);
  mtlpp::ComputeCommandEncoder commandEncoder =
      commandBuffer.ComputeCommandEncoder();
  commandEncoder.SetComputePipelineState(pipeline);
  // create buffers
  mtlpp::Buffer picBuff =
      device.NewBuffer((void*)pic, w * h * sizeof(color),
                       mtlpp::ResourceOptions::StorageModeShared);
  mtlpp::Buffer pointBuff =
      device.NewBuffer((void*)points, count * sizeof(point),
                       mtlpp::ResourceOptions::StorageModeShared);
  mtlpp::Buffer colorBuff =
      device.NewBuffer((void*)colors, count * sizeof(color),
                       mtlpp::ResourceOptions::StorageModeShared);

  // set buffers
  commandEncoder.SetBuffer(picBuff, 0, 0);
  commandEncoder.SetBuffer(pointBuff, 0, 1);
  commandEncoder.SetBuffer(colorBuff, 0, 2);
  commandEncoder.SetBytes(&count, sizeof(count), 3);

  // run
  mtlpp::Size threadsPerGrid(w, h, 1);
  auto _w = pipeline.GetThreadExecutionWidth();
  auto _h = pipeline.GetMaxTotalThreadsPerThreadgroup() / _w;
  mtlpp::Size threadsPerThreadgroup(_w, _h, 1);
  commandEncoder.DispatchThread(threadsPerGrid, threadsPerThreadgroup);

  // go
  commandEncoder.EndEncoding();
  commandBuffer.Commit();
  commandBuffer.WaitUntilCompleted();

  memcpy(pic, picBuff.GetContents(), w * h * sizeof(color));

  if (scene) delete scene;
  scene = new QGraphicsScene;
  scene->addItem(new QGraphicsPixmapItem(
      QPixmap::fromImage(QImage((uchar*)pic, w, h, QImage::Format_ARGB32))));

  ui->graphicsView->setScene(scene);
}
